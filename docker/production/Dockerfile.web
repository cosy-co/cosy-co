# Use Node.js v18 as the base image
FROM node:18-alpine AS base
# Install the latest pnpm version
RUN npm install -g pnpm@latest


FROM base as builder
RUN apk add --no-cache libc6-compat
RUN apk update
# Set working directory
WORKDIR /app
COPY . .
RUN SHELL=bash pnpm setup
RUN pnpm add -g turbo
RUN turbo prune --scope=web --docker


# Install dependencies
FROM base AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
# Set the working directory
WORKDIR /app

COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
# Copy root package.json and lockfile
# COPY package.json ./
# COPY pnpm-lock.yaml ./
# Copy the apps package.json
# COPY apps/web/package.json ./apps/web/package.json
RUN pnpm install

# Build the project
COPY --from=builder /app/out/full/ .
RUN pnpm turbo run build --filter=web --docker


# # Build the production-ready app
# FROM base AS build
# # Set the working directory to /app
# WORKDIR /app
# # Copy the installed dependencies from the previous stage to the container
# COPY --from=installer /app/node_modules ./node_modules
# # Copy the rest of the source code
# COPY . .
# # Build the app
# RUN pnpm build
# RUN pnpm prune --prod
# # Remove all the development dependencies since we don't need them to run the actual server.
# # RUN rm -rf node_modules
# # RUN pnpm install --production --frozen-lockfile --ignore-scripts --prefer-offline


# Create the production-ready image - final output of build
FROM base as runner
# Set the working directory to /app
WORKDIR /app
ENV NODE_ENV production
# Don't run production as root
# Add a new group called nodejs, with GID 1001
RUN addgroup --system -gid 1001 -S nodejs
# Add a new user called svelte, with UID/GID 1001, to run as a non-root user
RUN adduser --system -S svelte -u 1001 -G nodejs
# Switch to the `svelte` user
USER svelte
# Config files that the app needs
COPY --from=build --chown=svelte:nodejs /app/svelte.config.js  .
COPY --from=build --chown=svelte:nodejs /app/tailwind.config.js  .
COPY --from=installer --chown=svelte:nodejs /app/apps/web/package.json .
COPY --from=build --chown=svelte:nodejs /app/postcss.config.js  .
# Copy the production-ready app from the previous stage to the container (deps + built files)
COPY --from=build --chown=svelte:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=svelte:nodejs /app/static ./static

# Change ownership of the app files to the `svelte` user
# RUN chown -R svelte:nodejs /app

# Expose port 3000
EXPOSE 3000
# Start the app on port 3000
CMD ["pnpm", "start"]
